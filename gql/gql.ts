/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  mutation CommentAdd(\n    $content: String!\n    $authorId: ID!\n    $itemId: ID!\n    $createdAt: Int!\n  ) {\n    commentCreate(\n      input: {\n        content: $content\n        createdAt: $createdAt\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n": types.CommentAddDocument,
    "\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(id: $id) {\n      deletedId\n    }\n  }\n": types.ItemCommentDeleteDocument,
    "\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n": types.ItemVoteDocument,
    "\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(id: $id, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n": types.ItemVoteUpdateDocument,
    "\n  query Viewer {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          email\n          imageUrl\n          createdAt\n          items(first: 3) {\n            edges {\n              node {\n                id\n                title\n                comments(first: 100) {\n                  edges {\n                    __typename\n                  }\n                }\n                votes(first: 100) {\n                  edges {\n                    node {\n                      id\n                      positive\n                      user {\n                        id\n                      }\n                    }\n                  }\n                }\n                author {\n                  id\n                  name\n                  imageUrl\n                }\n                url\n                createdAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ViewerDocument,
    "\n  mutation UserCreateLogin(\n    $name: String!\n    $email: Email!\n    $createdAt: Int!\n    $imageUrl: String!\n  ) {\n    userCreate(\n      input: {\n        name: $name\n        email: $email\n        createdAt: $createdAt\n        imageUrl: $imageUrl\n      }\n    ) {\n      __typename\n    }\n  }\n": types.UserCreateLoginDocument,
    "\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(id: $id, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n": types.UserUpdateLoginDocument,
    "\n  query ItemsList {\n    itemCollection(first: 100) {\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              __typename\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n": types.ItemsListDocument,
    "\n  query ItemOne($id: ID!) {\n    item(id: $id) {\n      id\n      title\n      comments(first: 100) {\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n": types.ItemOneDocument,
    "\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(id: $id) {\n      deletedId\n    }\n  }\n": types.ItemOneDeleteDocument,
    "\n  mutation Item($title: String!, $url: URL!, $createdAt: Int!, $authorId: ID!) {\n    itemCreate(\n      input: {\n        title: $title\n        url: $url\n        createdAt: $createdAt\n        author: { link: $authorId }\n      }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n": types.ItemDocument,
    "\n  query UsersList {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n": types.UsersListDocument,
};

export function graphql(source: "\n  mutation CommentAdd(\n    $content: String!\n    $authorId: ID!\n    $itemId: ID!\n    $createdAt: Int!\n  ) {\n    commentCreate(\n      input: {\n        content: $content\n        createdAt: $createdAt\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CommentAdd(\n    $content: String!\n    $authorId: ID!\n    $itemId: ID!\n    $createdAt: Int!\n  ) {\n    commentCreate(\n      input: {\n        content: $content\n        createdAt: $createdAt\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(id: $id) {\n      deletedId\n    }\n  }\n"): (typeof documents)["\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(id: $id) {\n      deletedId\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(id: $id, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(id: $id, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query Viewer {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          email\n          imageUrl\n          createdAt\n          items(first: 3) {\n            edges {\n              node {\n                id\n                title\n                comments(first: 100) {\n                  edges {\n                    __typename\n                  }\n                }\n                votes(first: 100) {\n                  edges {\n                    node {\n                      id\n                      positive\n                      user {\n                        id\n                      }\n                    }\n                  }\n                }\n                author {\n                  id\n                  name\n                  imageUrl\n                }\n                url\n                createdAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Viewer {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          email\n          imageUrl\n          createdAt\n          items(first: 3) {\n            edges {\n              node {\n                id\n                title\n                comments(first: 100) {\n                  edges {\n                    __typename\n                  }\n                }\n                votes(first: 100) {\n                  edges {\n                    node {\n                      id\n                      positive\n                      user {\n                        id\n                      }\n                    }\n                  }\n                }\n                author {\n                  id\n                  name\n                  imageUrl\n                }\n                url\n                createdAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation UserCreateLogin(\n    $name: String!\n    $email: Email!\n    $createdAt: Int!\n    $imageUrl: String!\n  ) {\n    userCreate(\n      input: {\n        name: $name\n        email: $email\n        createdAt: $createdAt\n        imageUrl: $imageUrl\n      }\n    ) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation UserCreateLogin(\n    $name: String!\n    $email: Email!\n    $createdAt: Int!\n    $imageUrl: String!\n  ) {\n    userCreate(\n      input: {\n        name: $name\n        email: $email\n        createdAt: $createdAt\n        imageUrl: $imageUrl\n      }\n    ) {\n      __typename\n    }\n  }\n"];
export function graphql(source: "\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(id: $id, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(id: $id, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"];
export function graphql(source: "\n  query ItemsList {\n    itemCollection(first: 100) {\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              __typename\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ItemsList {\n    itemCollection(first: 100) {\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              __typename\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query ItemOne($id: ID!) {\n    item(id: $id) {\n      id\n      title\n      comments(first: 100) {\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query ItemOne($id: ID!) {\n    item(id: $id) {\n      id\n      title\n      comments(first: 100) {\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(id: $id) {\n      deletedId\n    }\n  }\n"): (typeof documents)["\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(id: $id) {\n      deletedId\n    }\n  }\n"];
export function graphql(source: "\n  mutation Item($title: String!, $url: URL!, $createdAt: Int!, $authorId: ID!) {\n    itemCreate(\n      input: {\n        title: $title\n        url: $url\n        createdAt: $createdAt\n        author: { link: $authorId }\n      }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Item($title: String!, $url: URL!, $createdAt: Int!, $authorId: ID!) {\n    itemCreate(\n      input: {\n        title: $title\n        url: $url\n        createdAt: $createdAt\n        author: { link: $authorId }\n      }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query UsersList {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersList {\n    userCollection(first: 100) {\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;